<html>
    <head>
        <title>INFO 4310 - Final Project</title>

        <!-- Loading scripts -->
        <script src="https://d3js.org/d3.v5.min.js"></script>
  

        <!-- Styling -->
        <style>

            body {
                background-color: #2C2D51;
                color: white;
                font-family: Verdana, Tahoma, sans-serif;
            }

            .tooltip {
                pointer-events: none;
            }

            #country-container {
                display: flex;
                flex-direction: row;
                align-items: flex-start;
                justify-content: center;
            }
            #countries-selected {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }

            #area-chart {
                margin-top: 100px;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }

            .header{
                background-image: url("rings.png");
                background-repeat: no-repeat;
                background-position: center; 
                background-size: cover;
                position: relative;
                width: 100%;
                height: 250px;
                padding: 4em;
            }

            button, select {
                background-color: white;
                color: #2C2D51;
                padding: 10px 24px;
                border-radius: 4px;
                font-size: 16px;
                font-family: Verdana
                
            }

            button:hover {
                background-color: #2C2D51; 
                border: 2px solid white;
                color:white;
            }
            button:active {
                background-color: white;
                color: #2C2D51;
            }


        </style>
    </head>

    <body>

        <div class = "top">
            <div class="header">
                <h1 class="page-title" style="font-size: 60px"> Olympics <br> Match-Up </h1>
                <p>by Sydney Wan (ssw73)</p>
            </div>
        </div>

        <div id="container">
            <h3 style="padding-left:4em">Select your countries.</h3>
            <div id="country-container">
                <svg id="tooltip-select" height="100" width="300"></svg>    
                <svg id="map" height="600" width="900"></svg>    
                <div id = "countries-selected">
                    <svg id="country-select"  height="250" width="500"></svg>
                    <div id="country-select-buttons">
                        <button id="go">Go!</button>
                        <button id="reset">Reset</button>
                    </div>                
                </div>
            </div>
            <div id = "area-chart" style="visibility: hidden;">
                <h3>Number of medals earned by year</h3>
                <p>[How to use] Click and drag the cursor on the chart to narrow the time range. 
                    Double click the chart to revert back to the original version.
                </p>
                <div id = "filters" >
                    <select name="Season" id="season">
                        <option value="season-all">Season: All</option>
                        <option value="Summer">Summer</option>
                        <option value="Winter">Winter</option>

                    </select>
                    <select name="Sex" id="sex">
                        <option value="sex-all">Sex: All</option>
                        <option value="M">Male</option>
                        <option value="F">Female</option>
                    </select>
                    <select name="Medal Type" id="medalType">
                        <option value="medal-all">Medal Type: All</option>
                        <option value="Gold">Gold</option>
                        <option value="Silver">Silver</option>
                        <option value="Bronze">Bronze</option>
                    </select>   
                </div>
                <svg id="area-chart-plot" height="600" width="1000"></svg>
            </div>
            <div id="bubbles">
                <svg id="bubble-chart" height="600" width="1000"></svg>

            </div>
            

        </div>
        
        
        <script>
            const requestData = async function() {
                //load data
                let countryData = await d3.json("countries.geo.json");
                const olympicData = await d3.csv("athlete_events.csv", d3.autoType);

                //define basic variables
                const svg = d3.select("#map");
                const svg_countries = d3.select("#country-select");
                const width = svg.attr("width");
                const height = svg.attr("height");
                const margin = { top: 20, right: 20, bottom: 20, left:20};
                const mapWidth = width - margin.left - margin.right;
                const mapHeight = height - margin.top - margin.bottom;
                const map = svg.append("g")
                                .attr("transform","translate("+margin.left+","+margin.top+")");

                //defining variables for area chart
                const svg_area = d3.select("#area-chart-plot");
                const chartMargin = { top: 20, right: 20, bottom: 20, left:30};
                const area_width = svg_area.attr("width") - chartMargin.left - chartMargin.right; 
                const area_height = svg_area.attr("height") - chartMargin.top - chartMargin.bottom;
                let season_filter = "season-all";
                let sex_filter = "sex-all";
                let medal_filter = "medal-all";        


                //create projections
                var projection = d3.geoMercator().fitSize([mapWidth, mapHeight + 30], countryData);
                var path = d3.geoPath().projection(projection);

                //get counts of athletes per country
                var athleteCounts = [];
                olympicData.forEach( d => {
                    if(athleteCounts.some(e => e.country === d.Team)) {
                        athleteCounts.forEach( obj => {
                            if (obj.country === d.Team) {
                                obj.count += 1;
                            }
                        })
                    }
                    else {
                        athleteCounts.push({
                        "country": d.Team,
                        "count": 1
                    })

                    }
                    
                })
                
                //define map color scale and create map
                let valueExtent = d3.extent(athleteCounts, d => d.count);
                const colorScale = d3.scaleSequential(d3.interpolateViridis).domain(valueExtent);

                map.selectAll("path.country").data(countryData.features)
                .join("path")
                .attr("class", "country")
                .attr("d", path)
                .attr("fill", function (d) { 
                    var result = athleteCounts.filter(obj => {
                        return d.properties.name === obj.country;
                    });
                    if (result.length === 0) { return "none";}
                    else { return colorScale(result[0].count); }
                })
                .attr("stroke", "white")
                .on('mouseover', mouseEntersState)
                .on('mouseout', mouseLeavesState)
                .on("click", mouseClickEvent);



                //define zoom functionality for map
                var zoom = d3.zoom()
                  .scaleExtent([1,10])
                  .translateExtent([[-50,-50],[mapWidth+50,mapHeight+50]])
                  .on("zoom", zoomMap);
                  
                svg.call(zoom);

                // Setting up tooltip to display map country and counts
                const tooltip_box = d3.select("#tooltip-select")
                const tooltipWidth_CONST = 120;
                const tooltipHeight_CONST = 40;
                const txt_CONST = 14;
                let tooltipWidth = tooltipWidth_CONST;
                let tooltipHeight = tooltipHeight_CONST;

                let tooltip = tooltip_box.append("g")
                           .attr("class", "tooltip")
                           .attr("visibility", "hidden"); 
          
                tooltip.append("rect")
                        .attr("fill", "white")
                        .attr("opacity", 0.9)
                        .attr("x", 0)
                        .attr("y", 0)
                        .attr("width", 200)
                        .attr("height", 40);
                
                let txt = tooltip.append("text")
                                .attr("class", "txt")
                                .attr("fill", "#7a0177")
                                .attr("text-anchor", "middle")
                                .attr("x", 100)
                                .attr("y", 20)
                                .style("font-weight", 600)
                                .style("font-size", 14);
                
   


                //defining country tooltip to display selected countries
                let country_tooltip = svg_countries.append("g")
                                                    .attr("class", "countries")
                                                    .attr("transform","translate("+margin.left+","+margin.top+")");
                country_tooltip.append("text")
                                .attr("fill", "white")
                                .style("text-anchor", "middle")
                                .attr("alignment-baseline", "hanging")
                                .attr("x", 250)
                                .attr("y", 100)
                                .attr("font-weight", 800)
                                .attr("font-size", 30)
                                .text('vs.');

                let country1 = country_tooltip.append("text").text("");
                let country2 = country_tooltip.append("text").text("")
                let countriesSelected = new Set();
                let warning = null;
                d3.select("#reset").on("click", resetCountries);
                d3.select("#go").on("click", setChartParameters);

                function resetCountries() {
                    
                    countriesSelected = new Set();
                    if (warning !== null) {
                        warning.html("");
                        warning = null;

                    }
                    country1.html("");
                    country2.html("");
                    country1 = country_tooltip.append("text")
                                            .attr("fill", "gray")
                                            .style("text-anchor", "middle")
                                            .attr("alignment-baseline", "hanging")
                                            .attr("x", 250)
                                            .attr("y", 50)
                                            .attr("font-weight", 800)
                                            .attr("font-size", 40)
                                            .text('[Select Country]');
                    country2 = country_tooltip.append("text")
                                                .attr("fill", "gray")
                                                .style("text-anchor", "middle")
                                                .attr("alignment-baseline", "hanging")
                                                .attr("x", 250)
                                                .attr("y", 150)
                                                .attr("font-weight", 800)
                                                .attr("font-size", 40)
                                                .text('[Select Country]');

                    //reset area chart
                    svg_area.html("");
                }

                resetCountries();

                function setChartParameters() {
                    d3.selectAll("#area-chart").style("visibility", "visible");
                    //filtering data to the selected countries
                    const teamData = olympicData.filter(obj => {
                        return countriesSelected.has(obj.Team);
                    });
                    let filteredData = [...teamData];
                    console.log("pre-filtered", filteredData);


                    //handle filter dropdowns
                    d3.selectAll("select").on("change", function(d) {
                        filteredData = filterData(teamData, d3.select(this));
                        var medalData = [];
                        filteredData.forEach( d => {
                            if(medalData.some(e => e.country === d.Team && e.year === d.Year)) {
                                medalData.forEach( obj => {
                                    if (obj.country === d.Team && obj.year === d.Year) {
                                        obj.count += 1;
                                        }
                                })
                            }
                            else {
                                medalData.push({
                                "country": d.Team,
                                "year": d.Year,
                                "count": 1
                                })

                            }
                        })

                        populateCharts(medalData);
                    });

                    //creating data for each country's medal count by year
                    var medalData = [];
                    filteredData.forEach( d => {
                        if(medalData.some(e => e.country === d.Team && e.year === d.Year)) {
                            medalData.forEach( obj => {
                                if (obj.country === d.Team && obj.year === d.Year) {
                                    obj.count += 1;
                                }
                            })
                        }
                        else {
                            medalData.push({
                            "country": d.Team,
                            "year": d.Year,
                            "count": 1
                        })

                        }
                    })

                    populateCharts(medalData);
                }

                function populateCharts(medalData) {
                    svg_area.html("");

                    if (countriesSelected.size < 2) { return; } //if not all countries are selected

                    document.getElementById("area-chart-plot").scrollIntoView({behavior: "smooth"});

                    //clip prevents brushing/zoom from extending past the y-axis
                    var clip = svg_area.append("defs").append("svg:clipPath")
                                        .attr("id", "clip")
                                        .append("svg:rect")
                                        .attr("width", area_width )
                                        .attr("height", area_height )
                                        .attr("x", 0)
                                        .attr("y", 0);

                    let areaChart = svg_area.append("g")
                                            .attr("transform", "translate(" + chartMargin.left + "," + chartMargin.top + ")")
                                            .attr("clip-path", "url(#clip)");
                    const yAxisArea = svg_area.append("g").attr("transform",`translate(${chartMargin.left-2},${chartMargin.top})`);
                    const xAxisArea = svg_area.append("g").attr("transform",`translate(${chartMargin.left},${area_height+2+chartMargin.top})`);

                    //x-axis
                    var x_extent = d3.extent(medalData, function(d) { return d.year; })
                    var xScale = d3.scaleLinear()
                                .domain(x_extent)
                                .range([ 0, area_width]);
                    let bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));

                    let xAxis = xAxisArea.append("g")
                                        .call(bottomAxis);

                    //y-axis
                    const y_extent = d3.extent(medalData, d => d.count);
                    var yScale = d3.scaleLinear().domain(y_extent).range([area_height, chartMargin.bottom]);
                    let leftAxis = d3.axisLeft(yScale).tickFormat(d3.format("d"));
                    let yAxis= yAxisArea.append("g").attr("class", "y axis").call(leftAxis);


                    //creating actual area chart
                    var selectedCountriesSorted = Array.from(countriesSelected);

                    //if the second country selected has more medals, the order in the array is swapped so area chart prints nicer
                    if (athleteCounts.find(item => item.country === selectedCountriesSorted[0]).count < athleteCounts.find(item => item.country === selectedCountriesSorted[1]).count) {
                        selectedCountriesSorted = selectedCountriesSorted.reverse();
                    }

                    //plot country 1
                    const country1_data = medalData.filter((d) => d["country"] == Array.from(selectedCountriesSorted)[0]).sort((a, b) => a.year - b.year);
                    areaChart.append("path")
                            .datum(country1_data)
                            .attr("class", "myArea")
                            .attr("fill", "#cce5df")
                            .attr("stroke", "#69b3a2")
                            .attr("stroke-width", 1.5)
                            .attr("opacity", 1)
                            .attr("d", d3.area()
                                .curve(d3.curveBasis)
                                .x(function(d) { return xScale(d.year) })
                                .y0(yScale(0))
                                .y1(function(d) { return yScale(d.count) })
                            )
                    
                    //plot country 2
                    const country2_data = medalData.filter((d) => d["country"] == Array.from(selectedCountriesSorted)[1]).sort((a, b) => a.year - b.year);
                    areaChart.append("path")
                            .datum(country2_data)
                            .attr("class", "myArea")
                            .attr("fill", "#DEB5EA")
                            .attr("stroke", "#C480D8")
                            .attr("stroke-width", 1.5)
                            .attr("opacity", 0.7)
                            .attr("d", d3.area()
                                .curve(d3.curveBasis)
                                .x(function(d) { return xScale(d.year) })
                                .y0(yScale(0))
                                .y1(function(d) { return yScale(d.count) })
                            )

                    //brushing
                    var brush = d3.brushX()
                                    .extent( [ [0,0], [area_width ,area_height] ] )  
                                    .on("end", brushed);
     
                    
                    areaChart.append("g")
                             .attr("class", "brush")            
                              .call(brush);

                    
                    function brushed() {

                        let selection = d3.event.selection

                        if(selection === null){
                            return;
                        }
                        else{
                            xScale.domain([ xScale.invert(selection[0]), xScale.invert(selection[1]) ]);
                            bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));;
                            areaChart.select(".brush").call(brush.move, null)
                        }

                        xAxis.transition()
                                 .duration(1000)
                                 .call(bottomAxis);

                        areaChart.selectAll(".myArea")
                                 .transition()
                                .duration(1000)
                                .attr("d", d3.area()
                                            .curve(d3.curveBasis)
                                            .x(function(d) { return xScale(d.year) })
                                            .y0(yScale(0))
                                            .y1(function(d) { return yScale(d.count) }))
                    }
                    //double click reverts the chart back to original 
                    areaChart.on("dblclick",function(){
                        xScale.domain(x_extent);
                        bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));
                        xAxis.transition().call(bottomAxis);
                        areaChart
                            .selectAll('.myArea')
                            .transition()
                            .attr("d", d3.area()
                                            .curve(d3.curveBasis)
                                            .x(function(d) { return xScale(d.year) })
                                            .y0(yScale(0))
                                            .y1(function(d) { return yScale(d.count) }));
                    });

                }

                function filterData(data, event) {
                    const selectedValue = event.node().value;
                    const seasons = ['season-all', 'Summer', 'Winter'];
                    const sexes = ['sex-all', 'M', 'F'];
                    const medals = ['medal-all', 'Gold', 'Silver', 'Bronze'];

                    console.log("selectedValue", selectedValue);

                    if (seasons.includes(selectedValue)) {
                        season_filter = selectedValue;
                    }
                    if (season_filter !== "season-all") { 
                        console.log("season has changed");
                        data = data.filter(obj => {
                            return obj.Season === season_filter;
                        });
                        console.log("data after season change", data);
                    }

                    if (sexes.includes(selectedValue)) {
                        console.log("sex has changed")
                        sex_filter = selectedValue;

                    }
                    if (sex_filter !== "sex-all") { 
                        data = data.filter(obj => {
                            return obj.Sex === sex_filter;
                        });

                        console.log("data after sex change", data);

                    }
                    if (medals.includes(selectedValue)) {
                        medal_filter = selectedValue;
                    }
                    if (medal_filter !== "medal-all") { 
                        data = data.filter(obj => {
                            return obj.Medal === medal_filter;
                        });
                        console.log("data after medal change", data);

                    }
                    console.log("filterData", data);
                    return data; 

                }

                

                function mouseEntersState() {
                    tooltip.style("visibility", "visible")
                    
                    let country = d3.select(this);
                    let countryName = country.datum().properties.name;
                    let countryData = athleteCounts.filter(obj => {
                        return countryName === obj.country;
                    });
                    let countryCount = 0;
                    if (countryData.length != 0) { 
                        countryCount = countryData[0].count;}

                    txt.text(countryName + ": " + countryCount);

                    country.attr("stroke", "white")
                           .attr("stroke-width", 3);

                }

                function mouseLeavesState() {

                    tooltip.style("visibility", "hidden");
                    d3.select(this).attr("stroke", "white")
                           .attr("stroke-width", 1);

                    
                }

                function mouseClickEvent() {
                    let country = d3.select(this);
                    let countryName = country.datum().properties.name;
                    let countryData = athleteCounts.filter(obj => {
                        return countryName === obj.country;
                    });
                    

                    //error handling: either country has no athletes or user selects already selected country
                    if (countryData[0].count === 0) { return; }
                    if (countriesSelected.has(countryName)) { return; }

                    if (countriesSelected.size === 2 && warning === null){
                        warning = country_tooltip.append("text")
                                        .attr("fill", "red")
                                        .attr("text-anchor", "middle")
                                        .attr("x", 250)
                                        .attr("y", 220)
                                        .attr("font-weight", 800)
                                        .text("Press Reset to change countries");

                    }

                    //accounting for if a user selects new countries but both slots are full
                    if (countriesSelected.size < 2) {
                        countriesSelected.add(countryName);
                    }

                    //change country names
                    if (countriesSelected.size === 1) {
                        country1.html("");
                        country1 = country_tooltip.append("text")
                                              .attr("fill", "white")
                                              .style("text-anchor", "middle")
                                              .attr("alignment-baseline", "hanging")
                                              .attr("x", 250)
                                              .attr("y", 50)
                                              .attr("font-weight", 800)
                                              .attr("font-size", 40)
                                              .text(Array.from(countriesSelected)[0]);

                    }
                    else if (countriesSelected.size === 2) {
                        country2.html("");
                        country2 = country_tooltip.append("text")
                                              .attr("fill", "white")
                                              .style("text-anchor", "middle")
                                              .attr("alignment-baseline", "hanging")
                                                .attr("x", 250)
                                                .attr("y", 150)
                                                .attr("font-weight", 800)
                                                .attr("font-size", 40)
                                                .text(Array.from(countriesSelected)[1]);

                    }
    
                }

                function zoomMap() {    
                    map.attr("transform", d3.event.transform);
                }

            }

            requestData();
            

            

            
        </script>

    </body>
</html>