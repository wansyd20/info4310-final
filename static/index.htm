<html>
    <head>
        <title>INFO 4310 - Final Project</title>

        <!-- Loading scripts -->
        <script src="https://d3js.org/d3.v5.min.js"></script>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@200..700&display=swap" rel="stylesheet">
  

        <!-- Styling -->
        <style>

            body {
                background-color: #2C2D51;
                color: white;
                font-family: "Oswald"
            }

            .tooltip {
                pointer-events: none;
            }

            #country-container {
                display: flex;
                flex-direction: row;
                align-items: flex-start;
                justify-content: center;
            }
            #countries-selected {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }

            #map-container{
                padding-left: 350px;
            }

            #area-chart {
                margin-top: 100px;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
            }

            .header{
                background-image: url("rings.png");
                background-repeat: no-repeat;
                background-position: center; 
                background-size: cover;
                position: relative;
                width: 100%;
                height: 250px;
                padding: 4em;
            }

            #bubble-season, #bubble-sex {
                display:flex;
                flex-direction: row;
                justify-content: center;
                padding-right: 20px;
            }

            button, select {
                background-color: white;
                color: #2C2D51;
                padding: 10px 24px;
                border-radius: 4px;
                font-size: 16px;
                font-family: Verdana
                
            }

            button:hover {
                background-color: #2C2D51; 
                border: 2px solid white;
                color:white;
            }
            button:active {
                background-color: white;
                color: #2C2D51;
            }

            #bubbles {
                display: flex;
                flex-direction: column;
            }

            .bubblef {
                margin-right: -2px;
            }


            .previous {
                background-color: #f1f1f1;
                color: black;
                font-size: 16px;
                padding-left: 10px;
                width: 15px;
                height: 30px;
                line-height: 0px;
            }

            .filters, #bubble-container {
                display: flex;
                flex-direction: row;
                justify-content: center;
            }

            .page-title {
                text-align: center;
                font-family: "Oswald";
                text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;

            }
          


        </style>
    </head>

    <body>

        <div class = "top">
            <div class="header">
                <h1 class="page-title" style="font-size: 80px"> OLYMPICS MATCH-UP </h1>
                <h3 class="page-title">by Sydney Wan (ssw73)</h3>
            </div>
        </div>
        <p style="font-size: 30px; text-align: center">"The Olympic Games are the world's only truly global, multi-sport, celebratory athletics competition. <br>
            With more than 200 countries participating in over 400 events across the Summer and Winter Games, <br>
            the Olympics are where the world comes to compete, feel inspired, and be together."<br><br>

            The Olympics are one of the few global events that bring participants and viewers alike together in friendly competition.<br>
            As the Paris 2024 Olympic games approach, who will be the top contenders? 
        
        </p>
        <div style="background-color: #6F6D95; width:100%; display: flex; flex-direction: column; align-items: center; margin-bottom: 50px; padding-left:0">
            <h3>Select your countries on the map to begin the match-up.</h3>
        </div>

        <div id="container">
            <div id="map-container">
                
                
                <p style="color:lightgray; margin-bottom: 0;">Medals earned overall</p>
                <svg id="tooltip-select" height="90" width="300"></svg>  
                <svg id="map-legend" height="50" width="400" style="margin-top: 0"></svg>    
                <div id="country-container">
                    <svg id="map" height="600" width="900"></svg>    
                    <div id = "countries-selected">
                        <svg id="country-select"  height="250" width="500"></svg>
                        <div id="country-select-buttons">
                            <button id="go">Go!</button>
                            <button id="reset">Reset</button>
                        </div>                
                    </div>
                </div>
            </div>
            <div id = "area-chart" style="visibility: hidden;">
                <div style="background-color: #6F6D95; width:100%; display: flex; flex-direction: column; align-items: center; margin-bottom: 50px">
                    <h3>Number of medals earned by year</h3>
                    <svg id="area-legend" height="100" width="500"></svg>
                    <p>[How to use] Click and drag the cursor on the chart to narrow the time range. 
                        Double click the chart to revert back to the original version.
                    </p>
                </div>
                
                <div class = "filters" >
                    <select name="Season" id="season">
                        <option value="season-all">Season: All</option>
                        <option value="Summer">Summer</option>
                        <option value="Winter">Winter</option>

                    </select>
                    <select name="Sex" id="sex">
                        <option value="sex-all">Sex: All</option>
                        <option value="M">Male</option>
                        <option value="F">Female</option>
                    </select>
                    <select name="Medal Type" id="medalType">
                        <option value="medal-all">Medal Type: All</option>
                        <option value="Gold">Gold</option>
                        <option value="Silver">Silver</option>
                        <option value="Bronze">Bronze</option>
                    </select>   
                </div>
                <svg id="area-chart-plot" height="600" width="1000"></svg>
            </div>
            <div id="bubbles" style="visibility: hidden;">
                <div style="background-color: #6F6D95; width:100%; display: flex; flex-direction: column; align-items: center; margin-top: 50px; margin-bottom: 50px">
                    <h3 style="text-align:center">Medal Breakdown by Athlete</h3>
                    <p>[How to use] Click a bubble to see athletes who have earned a medal in that sport.
                        Click an athlete to see their medal breakdown.
                    </p>

                </div>
                
                <div class="filters" >
                    <div id="bubble-season">
                        <button class="bubblef" id="summer" style="background-color: lightgray;
                        stroke:1px white">Summer</button>
                        <button class="bubblef" id="winter">Winter</button>
                    </div>
                    <div id="bubble-sex">
                        <button class="bubblef" id="male" style="background-color: lightgray;
                        stroke:1px white">Male</button>
                        <button class="bubblef" id="female">Female</button>

                    </div>      
                </div>
                <div id="bubble-container">
                    <button class="previous" style="visibility: hidden;">&#9664;</button>
                    <svg id="bubble-chart" height="600" width="1300" style="margin-left:250px"></svg>
                    <svg id="athlete-info" height="250" width="400" 
                    style="background-color:  #6F6D95; margin-top: 50px; margin-right: 10px; visibility: hidden;"></svg>
                </div>
                
            </div>
            
        </div>
        
        
        <script>
            const requestData = async function() {
                //load data
                let countryData = await d3.json("countries.geo.json");
                const olympicData = await d3.csv("athlete_events.csv", d3.autoType);

                //define basic variables
                const svg = d3.select("#map");
                const svg_countries = d3.select("#country-select");
                
                const width = svg.attr("width");
                const height = svg.attr("height");
                const margin = { top: 20, right: 20, bottom: 20, left:20};
                const mapWidth = width - margin.left - margin.right;
                const mapHeight = height - margin.top - margin.bottom;
                const map = svg.append("g")
                                .attr("transform","translate("+margin.left+","+margin.top+")");

                //defining variables for area chart
                const svg_area = d3.select("#area-chart-plot");
                const areaLegend= d3.select("#area-legend");
                const chartMargin = { top: 20, right: 20, bottom: 20, left:30};
                const area_width = svg_area.attr("width") - chartMargin.left - chartMargin.right; 
                const area_height = svg_area.attr("height") - chartMargin.top - chartMargin.bottom;
                let season_filter = "season-all";
                let sex_filter = "sex-all";
                let medal_filter = "medal-all";     
                
                //variables for bubble chart
                const svg_bubbles = d3.select("#bubble-chart");
                const svg_athlete = d3.select("#athlete-info");
                var bubble_season = "Summer";
                var bubble_sex = "M";

                //create projections
                var projection = d3.geoMercator().fitSize([mapWidth, mapHeight + 30], countryData);
                var path = d3.geoPath().projection(projection);

                //get counts of athletes per country
                var athleteCounts = [];
                olympicData.forEach( d => {
                    if(athleteCounts.some(e => e.country === d.Team)) {
                        athleteCounts.forEach( obj => {
                            if (obj.country === d.Team) {
                                obj.count += 1;
                            }
                        })
                    }
                    else {
                        athleteCounts.push({
                        "country": d.Team,
                        "count": 1
                    })

                    }
                    
                })
                
                //define map color scale and create map
                let valueExtent = d3.extent(athleteCounts, d => d.count);
                const colorScale = d3.scaleSequential(d3.interpolateViridis).domain(valueExtent);

                map.selectAll("path.country").data(countryData.features)
                .join("path")
                .attr("class", "country")
                .attr("d", path)
                .attr("fill", function (d) { 
                    var result = athleteCounts.filter(obj => {
                        return d.properties.name === obj.country;
                    });
                    if (result.length === 0) { return "none";}
                    else { return colorScale(result[0].count); }
                })
                .attr("stroke", "white")
                .on('mouseover', mouseEntersState)
                .on('mouseout', mouseLeavesState)
                .on("click", mouseClickEvent);

                //legend -- adapted from: https://observablehq.com/@tmcw/d3-scalesequential-continuous-color-legend-example
                const mapLegend = d3.select("#map-legend");
                const legendWidth = mapLegend.attr("width");
                const legendHeight = mapLegend.attr("height");
                const legendMargin = {top: 5, right: 5, bottom: 30, left: 5};
                const barHeight = 20;
                const legendAxisScale = d3.scaleLinear()
                                        .domain(colorScale.domain())
                                        .range([legendMargin.left, legendWidth - legendMargin.right])

                legendAxisBottom = g => g
                                .attr("class", `x-axis`)
                                .attr("transform", `translate(0,${legendHeight - legendMargin.bottom})`)
                                .call(d3.axisBottom(legendAxisScale)
                                    .ticks(legendWidth / 80)
                                    .tickSize(-barHeight))

                const defs = mapLegend.append("defs");
                const linearGradient = defs.append("linearGradient")
                                        .attr("id", "linear-gradient");

                linearGradient.selectAll("stop")
                                .data(colorScale.ticks()
                                                .map((t, i, n) => ({ offset: `${100*i/n.length}%`, color: colorScale(t) })))
                                .enter().append("stop")
                                .attr("offset", d => d.offset)
                                .attr("stop-color", d => d.color);
                
                mapLegend.append('g')
                    .attr("transform", `translate(0,${legendHeight - legendMargin.bottom - barHeight})`)
                    .append("rect")
                    .attr('transform', `translate(${legendMargin.left}, 0)`)
                    .attr("width", legendWidth - legendMargin.right - legendMargin.left)
                    .attr("height", barHeight)
                    .style("fill", "url(#linear-gradient)");
                
                mapLegend.append('g')
                    .call(legendAxisBottom);
                


                //define zoom functionality for map
                var zoom = d3.zoom()
                  .scaleExtent([1,10])
                  .translateExtent([[-50,-50],[mapWidth+50,mapHeight+50]])
                  .on("zoom", zoomMap);
                  
                svg.call(zoom);

                // Setting up tooltip to display map country and counts
                const tooltip_box = d3.select("#tooltip-select")
                const tooltipWidth_CONST = 120;
                const tooltipHeight_CONST = 40;
                const txt_CONST = 14;
                let tooltipWidth = tooltipWidth_CONST;
                let tooltipHeight = tooltipHeight_CONST;

                let tooltip = tooltip_box.append("g")
                           .attr("class", "tooltip")
                           .attr("visibility", "hidden"); 
          
                tooltip.append("rect")
                        .attr("fill", "white")
                        .attr("opacity", 0.9)
                        .attr("x", 0)
                        .attr("y", 0)
                        .attr("width", 200)
                        .attr("height", 40);
                
                let txt = tooltip.append("text")
                                .attr("class", "txt")
                                .attr("fill", "#7a0177")
                                .attr("text-anchor", "middle")
                                .attr("x", 100)
                                .attr("y", 20)
                                .style("font-weight", 600)
                                .style("font-size", 14);
                
   


                //defining country tooltip to display selected countries
                let country_tooltip = svg_countries.append("g")
                                                    .attr("class", "countries")
                                                    .attr("transform","translate("+margin.left+","+margin.top+")");
                country_tooltip.append("text")
                                .attr("fill", "white")
                                .style("text-anchor", "middle")
                                .attr("alignment-baseline", "hanging")
                                .attr("x", 250)
                                .attr("y", 100)
                                .attr("font-weight", 800)
                                .attr("font-size", 30)
                                .text('vs.');

                let country1 = country_tooltip.append("text").text("");
                let country2 = country_tooltip.append("text").text("")
                let countriesSelected = new Set();
                let warning = null;
                d3.select("#reset").on("click", resetCountries);
                d3.select("#go").on("click", function(d){
                                    setChartParameters();
                                    prepBubbleChart(bubble_season, bubble_sex)});

                function resetCountries() {
                    
                    countriesSelected = new Set();
                    if (warning !== null) {
                        warning.html("");
                        warning = null;

                    }
                    country1.html("");
                    country2.html("");
                    country1 = country_tooltip.append("text")
                                            .attr("fill", "gray")
                                            .style("text-anchor", "middle")
                                            .attr("alignment-baseline", "hanging")
                                            .attr("x", 250)
                                            .attr("y", 50)
                                            .attr("font-weight", 800)
                                            .attr("font-size", 40)
                                            .text('[Select Country]');
                    country2 = country_tooltip.append("text")
                                                .attr("fill", "gray")
                                                .style("text-anchor", "middle")
                                                .attr("alignment-baseline", "hanging")
                                                .attr("x", 250)
                                                .attr("y", 150)
                                                .attr("font-weight", 800)
                                                .attr("font-size", 40)
                                                .text('[Select Country]');

                    //reset area chart
                    svg_area.html("");
                }

                resetCountries();

                function setChartParameters() {
                    d3.selectAll("#area-chart").style("visibility", "visible");
                    //filtering data to the selected countries
                    const teamData = olympicData.filter(obj => {
                        return countriesSelected.has(obj.Team);
                    });
                    let filteredData = [...teamData];


                    //handle filter dropdowns
                    d3.selectAll("select").on("change", function(d) {
                        filteredData = filterData(teamData, d3.select(this));
                        var medalData = [];
                        filteredData.forEach( d => {
                            if(medalData.some(e => e.country === d.Team && e.year === d.Year)) {
                                medalData.forEach( obj => {
                                    if (obj.country === d.Team && obj.year === d.Year) {
                                        obj.count += 1;
                                        }
                                })
                            }
                            else {
                                medalData.push({
                                "country": d.Team,
                                "year": d.Year,
                                "count": 1
                                })

                            }
                        })

                        populateCharts(medalData);
                    });

                    //creating data for each country's medal count by year
                    var medalData = [];
                    filteredData.forEach( d => {
                        if(medalData.some(e => e.country === d.Team && e.year === d.Year)) {
                            medalData.forEach( obj => {
                                if (obj.country === d.Team && obj.year === d.Year) {
                                    obj.count += 1;
                                }
                            })
                        }
                        else {
                            medalData.push({
                            "country": d.Team,
                            "year": d.Year,
                            "count": 1
                        })

                        }
                    })

                    populateCharts(medalData);
                }
                


                function prepBubbleChart(season, sex) {
                    svg_bubbles.html("");
                    d3.selectAll("#bubbles").style("visibility", "visible");
                    d3.selectAll("button.bubblef").on("click", toggleBubbleFilter);

                    if (bubble_sex !== sex) { bubble_sex = sex;}
                    if (bubble_season !== season) { bubble_sex = season;}

                    const teamData = olympicData.filter(obj => {
                        return countriesSelected.has(obj.Team) && obj.Medal !== "NA" && 
                        obj.Season == bubble_season && obj.Sex=== bubble_sex;
                    });
                    let filteredData = [...teamData];
   
                    const sportCounts = [];
                    filteredData.forEach( d => {
                        if(sportCounts.some(e => e.sport === d.Sport)) {
                            sportCounts.forEach( obj => {
                            if (obj.sport === d.Sport) {
                                obj.medals += 1;
                            }
                        })
                        }
                        else {
                            sportCounts.push({
                            "sport": d.Sport,
                            "medals": 1
                        })

                        }

                    })
                    let medalExtent = d3.extent(sportCounts, d => d.medals);
                    const bubbleColorScale = d3.scaleSequential(d3.interpolateViridis).domain(medalExtent);
                    createBubbleChart(svg_bubbles, sportCounts, "sport", "medals", bubbleColorScale);
                    
                            

                }
                
                function prepSecondBubbleChart(sport) {
                    svg_bubbles.html("");

                    const teamData = olympicData.filter(obj => {
                        return countriesSelected.has(obj.Team) && obj.Medal !== "NA" && 
                        obj.Sport == sport && obj.Season == bubble_season && obj.Sex=== bubble_sex;;
                    });
                    let filteredData = [...teamData];
        

                    const athleteCounts = [];
                    filteredData.forEach( d => {
                        const medal = d.Medal;
                        if(athleteCounts.some(e => e.name === d.Name)) {
                            athleteCounts.forEach( obj => {
                                if (obj.name === d.Name && obj.hasOwnProperty(medal)) {
                                    obj[`${medal}`] += 1;
                                    obj["total"] += 1;
                                }
                                else if (obj.name === d.Name) {
                                    obj[`${medal}`] = 1;
                                    obj["total"] += 1;
                                }
                                    
                                
                            })
                        }
                        else {
                            athleteCounts.push({
                            "name": d.Name,
                            [`${medal}`]: 1,
                            total: 1,
                            team: d.Team

                        })

                        }
                    });
                    let medalExtent = d3.extent(athleteCounts, d => d.total);
                    const bubbleColorScale = d3.scaleSequential(d3.interpolateViridis).domain(medalExtent);
                    createBubbleChart(svg_bubbles, athleteCounts, "name", "total", bubbleColorScale);
                }

                function toggleBubbleFilter() {
                    const selected = d3.select(this);
                    svg_athlete.style("visibility", "hidden");

                    selected.style("background-color", "lightgray");                    

                    if (selected.attr("id") === "female") {
                        d3.selectAll("#male")
                            .style("background-color", "white")
                            .style("color", "#2C2D51");
                        bubble_sex = "F";

                    }
                    else if (selected.attr("id") === "male") {
                        d3.selectAll("#female")
                            .style("background-color", "white")
                            .style("color", "#2C2D51");
                        bubble_sex = "M";
                        
                    }
                    else if (selected.attr("id") === "summer") {
                        d3.selectAll("#winter")
                            .style("background-color", "white")
                            .style("color", "#2C2D51");
                        bubble_season = "Summer";
                        
                    }
                    else { //automatically winter
                        d3.selectAll("#summer")
                            .style("background-color", "white")
                            .style("color", "#2C2D51");
                        bubble_season = "Winter";

                    }
                    prepBubbleChart(bubble_season, bubble_sex);

                }

                function displayAthleteInfo(athleteData) {
                    svg_athlete.html("");
                    svg_athlete.style("visibility", "visible");
                    svg_athlete.append("text")
                               .attr("x", 10)
                               .attr("y", 40)
                               .attr("dy", "0em")
                               .attr("font-weight", 600)
                               .attr("font-size", "20px")
                               .attr("fill", "white")
                               .text(athleteData.name)
                               .call(wrap, 240);
                    svg_athlete.append("text")
                               .attr("x", 10)
                               .attr("y", 90)
                               .attr("fill", "white")
                               .attr("font-weight", 400)
                               .attr("font-size", "18px")
                               .text(`Team: ${athleteData.team}`);

                    var y_pos = 140;
                    if (athleteData.hasOwnProperty("Gold")) {
                        svg_athlete.append("text")
                               .attr("x", 10)
                               .attr("y", y_pos)
                               .attr("font-weight", 300)
                               .attr("font-size", "15px")
                               .attr("fill", "white")
                               .text(`Gold: ${athleteData.Gold}`);
                        y_pos += 50;
                    }
                    if (athleteData.hasOwnProperty("Silver")) {
                        svg_athlete.append("text")
                               .attr("x", 10)
                               .attr("y", y_pos)
                               .attr("fill", "white")
                               .attr("font-weight", 300)
                               .attr("font-size", "15px")
                               .text(`Silver: ${athleteData.Silver}`);
                        y_pos += 50;
                    }
                    if (athleteData.hasOwnProperty("Bronze")) {
                        svg_athlete.append("text")
                               .attr("x", 10)
                               .attr("y", y_pos)
                               .attr("fill", "white")
                               .attr("font-weight", 300)
                               .attr("font-size", "15px")
                               .text(`Bronze: ${athleteData.Bronze}`);
                    }


                }

                function populateCharts(medalData) {
                    svg_area.html("");
                    areaLegend.html("");

                    if (countriesSelected.size < 2) { return; } //if not all countries are selected

                    document.getElementById("area-chart").scrollIntoView({behavior: "smooth"});

                    

                    //clip prevents brushing/zoom from extending past the y-axis
                    var clip = svg_area.append("defs").append("svg:clipPath")
                                        .attr("id", "clip")
                                        .append("svg:rect")
                                        .attr("width", area_width )
                                        .attr("height", area_height )
                                        .attr("x", 0)
                                        .attr("y", 0);

                    let areaChart = svg_area.append("g")
                                            .attr("transform", "translate(" + chartMargin.left + "," + chartMargin.top + ")")
                                            .attr("clip-path", "url(#clip)");
                    const yAxisArea = svg_area.append("g").attr("transform",`translate(${chartMargin.left-2},${chartMargin.top})`);
                    const xAxisArea = svg_area.append("g").attr("transform",`translate(${chartMargin.left},${area_height+2+chartMargin.top})`);

                    //x-axis
                    var x_extent = d3.extent(medalData, function(d) { return d.year; })
                    var xScale = d3.scaleLinear()
                                .domain(x_extent)
                                .range([ 0, area_width]);
                    let bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));

                    let xAxis = xAxisArea.append("g")
                                        .call(bottomAxis);

                    //y-axis
                    const y_extent = d3.extent(medalData, d => d.count);
                    var yScale = d3.scaleLinear().domain(y_extent).range([area_height, chartMargin.bottom]);
                    let leftAxis = d3.axisLeft(yScale).tickFormat(d3.format("d"));
                    let yAxis= yAxisArea.append("g").attr("class", "y axis").call(leftAxis);


                    //creating actual area chart
                    var selectedCountriesSorted = Array.from(countriesSelected);

                    //if the second country selected has more medals, the order in the array is swapped so area chart prints nicer
                    if (athleteCounts.find(item => item.country === selectedCountriesSorted[0]).count < athleteCounts.find(item => item.country === selectedCountriesSorted[1]).count) {
                        selectedCountriesSorted = selectedCountriesSorted.reverse();
                    }

                    const areaColors = ["#cce5df", "#DEB5EA"];

                    //legend

                    areaLegend.selectAll("circles")
                                .data(selectedCountriesSorted)
                                .enter()
                                .append("circle")
                                    .attr("cx", 190)
                                    .attr("cy", function(d,i){ return 30 + i*(14+12)})
                                    .attr("r", 10)
                                    .style("fill", function(d,i){ return areaColors[i]});

                    areaLegend.selectAll("legend_names")
                                .data(selectedCountriesSorted)
                                .enter()
                                .append("text")
                                    .attr("x", 210)
                                    .attr("y", function(d,i){ return 30 + i*(10+12) + (10/2)})
                                    .style("fill", "white")
                                    .text(function(d){ return d })
                                    .attr("text-anchor", "left")
                                    .style("alignment-baseline", "middle")
                                    .style("font-size", "14px");

                    //plot country 1
                    const country1_data = medalData.filter((d) => d["country"] == Array.from(selectedCountriesSorted)[0]).sort((a, b) => a.year - b.year);
                    areaChart.append("path")
                            .datum(country1_data)
                            .attr("class", "myArea")
                            .attr("fill", "#cce5df")
                            .attr("stroke", "#69b3a2")
                            .attr("stroke-width", 1.5)
                            .attr("opacity", 1)
                            .attr("d", d3.area()
                                .curve(d3.curveBasis)
                                .x(function(d) { return xScale(d.year) })
                                .y0(yScale(0))
                                .y1(function(d) { return yScale(d.count) })
                            )
                    
                    //plot country 2
                    const country2_data = medalData.filter((d) => d["country"] == Array.from(selectedCountriesSorted)[1]).sort((a, b) => a.year - b.year);
                    areaChart.append("path")
                            .datum(country2_data)
                            .attr("class", "myArea")
                            .attr("fill", "#DEB5EA")
                            .attr("stroke", "#C480D8")
                            .attr("stroke-width", 1.5)
                            .attr("opacity", 0.7)
                            .attr("d", d3.area()
                                .curve(d3.curveBasis)
                                .x(function(d) { return xScale(d.year) })
                                .y0(yScale(0))
                                .y1(function(d) { return yScale(d.count) })
                            )

                    //brushing
                    var brush = d3.brushX()
                                    .extent( [ [0,0], [area_width ,area_height] ] )  
                                    .on("end", brushed);
     
                    
                    areaChart.append("g")
                             .attr("class", "brush")            
                              .call(brush);

                    //function to zoom in on area chart
                    function brushed() {

                        let selection = d3.event.selection

                        if(selection === null){
                            return;
                        }
                        else{
                            xScale.domain([ xScale.invert(selection[0]), xScale.invert(selection[1]) ]);
                            bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));;
                            areaChart.select(".brush").call(brush.move, null)
                        }

                        xAxis.transition()
                                 .duration(1000)
                                 .call(bottomAxis);

                        areaChart.selectAll(".myArea")
                                 .transition()
                                .duration(1000)
                                .attr("d", d3.area()
                                            .curve(d3.curveBasis)
                                            .x(function(d) { return xScale(d.year) })
                                            .y0(yScale(0))
                                            .y1(function(d) { return yScale(d.count) }))
                    }
                    //double click reverts the chart back to original 
                    areaChart.on("dblclick",function(){
                        xScale.domain(x_extent);
                        bottomAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));
                        xAxis.transition().call(bottomAxis);
                        areaChart
                            .selectAll('.myArea')
                            .transition()
                            .attr("d", d3.area()
                                            .curve(d3.curveBasis)
                                            .x(function(d) { return xScale(d.year) })
                                            .y0(yScale(0))
                                            .y1(function(d) { return yScale(d.count) }));
                    });

                }

                //adapted from my HW3 bubble chart function
                function createBubbleChart(svg, data, name, value, colorScale) {
                    svg_bubbles.html("");
                    if (name==="name") {
                        d3.selectAll(".previous").style("visibility", "visible")
                          .on("click", d => {
                              prepBubbleChart(bubble_season, bubble_sex);
                              svg_athlete.style("visibility", "hidden");
                          });
                    }
                    else {
                        d3.selectAll(".previous").style("visibility", "hidden");
                    }

                    var selectedCountriesSorted = Array.from(countriesSelected);
                    if (athleteCounts.find(item => item.country === selectedCountriesSorted[0]).count < athleteCounts.find(item => item.country === selectedCountriesSorted[1]).count) {
                        selectedCountriesSorted = selectedCountriesSorted.reverse();
                    }

                    const width = svg_bubbles.attr("width");
                    const height = svg_bubbles.attr("height");
                    const margin = { top: 5, bottom: 0, right: 5, left: 5 };
                    const bubbleWidth = width - margin.left - margin.right;
                    const bubbleHeight = height - margin.top - margin.bottom;

                    const pack = d3.pack()
                                .size([bubbleWidth, bubbleHeight])
                                .padding(3);

                    const hierarchy = d3.hierarchy({children: data})
                                    .sum(d => d[value]);

                    const root = pack(hierarchy);

                    const bubbles = svg.append("g").selectAll()
                                                    .data(root.leaves())
                                                    .join("g")
                                                    .attr("transform", d => `translate(${d.x},${d.y})`);                    

                    bubbles.append("circle")
                            .attr("class", name)
                            .attr("r", d => d.r)
                            .attr("fill", d => {
                                if (name==="sport") return colorScale(d.data[value]);
                                else if (d.data.team === selectedCountriesSorted[0]){;
                                    return "#cce5df";
                                }
                                else {
                                    return "#DEB5EA";
                                }
                            })
                            .on('mouseover', bubbleEntersState)
                            .on('mouseout', bubbleLeavesState)
                            .on("click", bubbleClickEvent);

                    bubbles.append("text")
                            .attr("dy", "-0.3em")
                            .style("text-anchor", "middle")
                            .style("fill", d=> {
                                if (name==="name") return "gray";
                                else return "white"; })
                            .style("font-weight", 600)
                            .style("font-size", d => d.r / 4)
                            .text(d => {
                                if (d.data[name]==="Athletics") { return "Track/Field";}
                                else { return d.data[name];}
                            })
                            .attr("pointer-events", "none")
                            .call(wrap, 20); 
    
            }

            function bubbleClickEvent() {
               
                const selectedBubble = d3.select(this);
                if (selectedBubble.attr("class") === "sport") {
                    const selectedSport = selectedBubble._groups[0][0].__data__.data.sport;
                    prepSecondBubbleChart(selectedSport);
                }
                else if (selectedBubble.attr("class") === "name") { 
                    const selectedName = selectedBubble._groups[0][0].__data__.data;
                    displayAthleteInfo(selectedName);


                }
            }

            function bubbleEntersState() {
                var bubble = d3.select(this);
                bubble.attr("opacity", 0.6).style("cursor", "pointer");
            }

            function bubbleLeavesState() {
                var bubble = d3.select(this);
                bubble.attr("opacity", 1).style("cursor", "default");
            }

            //function courtesy of Mike Bostock: https://gist.github.com/mbostock/7555321
            function wrap(text, width) {
                text.each(function() {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 1.2, // ems
                        y = text.attr("y"),
                        dy = parseFloat(text.attr("dy")),
                        tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
                    while (word = words.pop()) {
                    line.push(word);
                    tspan.text(line.join(" "));
                    if (tspan.node().getComputedTextLength() > width) 
                    {
                        line.pop();
                        tspan.text(line.join(" "));
                        line = [word];
                        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", lineHeight + dy + "em").text(word);
                        ++lineNumber;
                    }
                    }
                    text.attr("y", -(((lineNumber-1)/2)*lineHeight) + "em");
                });
            };

            //filters for area chart
            function filterData(data, event) {
                const selectedValue = event.node().value;
                const seasons = ['season-all', 'Summer', 'Winter'];
                const sexes = ['sex-all', 'M', 'F'];
                const medals = ['medal-all', 'Gold', 'Silver', 'Bronze'];

                if (seasons.includes(selectedValue)) {
                    season_filter = selectedValue;
                }
                if (season_filter !== "season-all") { 
                    data = data.filter(obj => {
                        return obj.Season === season_filter;
                    });
                }

                if (sexes.includes(selectedValue)) {
                    sex_filter = selectedValue;

                }
                if (sex_filter !== "sex-all") { 
                    data = data.filter(obj => {
                        return obj.Sex === sex_filter;
                    });

                }
                if (medals.includes(selectedValue)) {
                    medal_filter = selectedValue;
                }
                if (medal_filter !== "medal-all") { 
                    data = data.filter(obj => {
                        return obj.Medal === medal_filter;
                    });

                }
                return data; 

            }

                

                function mouseEntersState() {
                    tooltip.style("visibility", "visible")
                    
                    let country = d3.select(this);
                    let countryName = country.datum().properties.name;
                    let countryData = athleteCounts.filter(obj => {
                        return countryName === obj.country;
                    });
                    let countryCount = 0;
                    if (countryData.length != 0) { 
                        countryCount = countryData[0].count;}

                    txt.text(countryName + ": " + countryCount);

                    country.attr("stroke", "white")
                           .attr("stroke-width", 3);

                }

                function mouseLeavesState() {

                    tooltip.style("visibility", "hidden");
                    d3.select(this).attr("stroke", "white")
                           .attr("stroke-width", 1);

                    
                }

                function mouseClickEvent() {
                    let country = d3.select(this);
                    let countryName = country.datum().properties.name;
                    let countryData = athleteCounts.filter(obj => {
                        return countryName === obj.country;
                    });
                    

                    //error handling: either country has no athletes or user selects already selected country
                    if (countryData[0].count === 0) { return; }
                    if (countriesSelected.has(countryName)) { return; }

                    if (countriesSelected.size === 2 && warning === null){
                        warning = country_tooltip.append("text")
                                        .attr("fill", "red")
                                        .attr("text-anchor", "middle")
                                        .attr("x", 250)
                                        .attr("y", 220)
                                        .attr("font-weight", 800)
                                        .text("Press Reset to change countries");

                    }

                    //accounting for if a user selects new countries but both slots are full
                    if (countriesSelected.size < 2) {
                        countriesSelected.add(countryName);
                    }

                    //change country names
                    if (countriesSelected.size === 1) {
                        country1.html("");
                        country1 = country_tooltip.append("text")
                                              .attr("fill", "white")
                                              .style("text-anchor", "middle")
                                              .attr("alignment-baseline", "hanging")
                                              .attr("x", 250)
                                              .attr("y", 50)
                                              .attr("font-weight", 800)
                                              .attr("font-size", 40)
                                              .text(Array.from(countriesSelected)[0]);

                    }
                    else if (countriesSelected.size === 2) {
                        country2.html("");
                        country2 = country_tooltip.append("text")
                                              .attr("fill", "white")
                                              .style("text-anchor", "middle")
                                              .attr("alignment-baseline", "hanging")
                                                .attr("x", 250)
                                                .attr("y", 150)
                                                .attr("font-weight", 800)
                                                .attr("font-size", 40)
                                                .text(Array.from(countriesSelected)[1]);

                    }
    
                }

                function zoomMap() {    
                    map.attr("transform", d3.event.transform);
                }

            }

            requestData();
            

            

            
        </script>

    </body>
</html>